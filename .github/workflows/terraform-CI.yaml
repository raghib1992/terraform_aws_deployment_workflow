name: CI - Scan Terraform Files

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  generate-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    outputs:
      dirs: ${{ steps.collect.outputs.dirs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      # - name: Get GitHub Apps Token # This enables access to Terraform modules in internal/private repos
      #   id: get_token
      #   uses: tibdex/github-app-token@v1.7.0
      #   with:
      #     private_key: ${{ secrets.ORG_REPO_READ_PRIVATE_KEY }}
      #     app_id: ${{ secrets.ORG_REPO_READ_APP_ID }}
      #   # Doc: https://github.com/marketplace/actions/github-app-token

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Generate Matrix
        id: collect
        shell: bash
        run: |
          # Example: find dirs with *.tf, strip "./", output JSON array
          mapfile -t TF_DIRS < <(find . -type f -name '*.tf' \
              -not -path '*/.terraform/*' -exec dirname {} \; \
            | sed 's#^\./##' | sort -u)
          printf 'dirs=%s\n' "$(printf '%s\n' "${TF_DIRS[@]}" | jq -R . | jq -s .)" >> "$GITHUB_OUTPUT"
          # Example output: ["basket","order-management"]

  terraform-scan:
    name: Scan â–º ${{ matrix.subdomain }} Subdomain
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix:
        dir: ${{ fromJson(needs.generate-matrix.outputs.dirs) }}
    steps:
      - name: Checkout-Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Terraform fmt (check)
        run: terraform fmt -check -recursive
        working-directory: ${{ matrix.path }}

      # Use -backend=false to avoid touching remote backends/creds in CI lint stage
      - name: Terraform init (no backend)
        run: terraform init -backend=false
        working-directory: ${{ matrix.path }}

      - name: Terraform validate
        run: terraform validate -no-color
        working-directory: ${{ matrix.path }}

      # ---------- TFLint ----------
      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v4

      - name: TFLint init (plugins)
        run: tflint --init
        working-directory: ${{ matrix.path }}

      - name: Run TFLint
        run: tflint --recursive
        working-directory: ${{ matrix.path }}
        # Add --format=compact for shorter output, or --config=.tflint.hcl if needed

      # ---------- tfsec ----------
      # Runs tfsec in Docker so you don't need to install it on the runner
      - name: Run tfsec (generate SARIF)
        working-directory: ${{ matrix.path }}
        run: |
          docker run --rm -v "$PWD":/src aquasec/tfsec:latest \
            /src --no-module-download --soft-fail=false \
            --format sarif --out tfsec.sarif

      # Optional: upload SARIF so findings show up in GitHub "Code scanning alerts"
      - name: Upload tfsec results to GitHub Code Scanning
        if: always()  # still upload even if previous steps failed
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ github.workspace }}/tfsec.sarif