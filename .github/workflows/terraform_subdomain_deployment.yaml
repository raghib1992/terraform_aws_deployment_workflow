name: Subdomain Matrix Deploy

on:
  workflow_dispatch:
    inputs:
      subdomains:
        description: 'JSON list of subdomains (e.g. ["basket", "order-management"])'
        required: true
      env:
        description: 'Target environment (dev, qa, perf)'
        type: choice
        options:
          - sandbox
          - dev
          - qa
          - performance
          - staging
          - staging-green
          - production
        required: true

permissions:
  actions: write
  id-token: write
  contents: read

jobs:
  generate-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix-json: ${{ steps.build.outputs.matrix-json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Get GitHub Apps Token # This enables access to Terraform modules in internal/private repos
      #   id: get_token
      #   uses: tibdex/github-app-token@v1.7.0
      #   with:
      #     private_key: ${{ secrets.ORG_REPO_READ_PRIVATE_KEY }}
      #     app_id: ${{ secrets.ORG_REPO_READ_APP_ID }}
      #   # Doc: https://github.com/marketplace/actions/github-app-token

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Generate Matrix
        id: build
        run: |
          echo '${{ github.event.inputs.subdomains }}' > subdomains.json

          MATRIX=$(python3 scripts/build_matrix.py '${{ github.event.inputs.subdomains }}' '${{ github.event.inputs.env }}')
          echo "$MATRIX"
          echo "matrix-json=$MATRIX" >> "$GITHUB_OUTPUT"

  terraform-apply:
    name: Deploy ${{ matrix.subdomain }} Subdomain â–º ${{ github.event.inputs.env }}
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix-json) }}
    steps:
      - name: Checkout-Code
        uses: actions/checkout@v4

      - name: Simulate Deployment
        run: |
          echo "Deploying ${{ matrix.subdomain }} in ${{ matrix.env }}"
          echo "Using AWS Account: ${{ matrix.account_id }}"
          echo "Path: ${{ matrix.path }}"
          echo "Using AWS Account: ${{ matrix.account_name }}"
          # Here you can call terraform, ansible, helm, etc.

      - name: Configure AWS Credentials for reading state
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # role-to-assume: arn:aws:iam::${{ matrix.account_id }}:role/github-workflow-role-tf-deployer
          role-to-assume: arn:aws:iam::${{ matrix.account_id }}:role/github-actions-role
          role-session-name: tf-ami-deployer-pipeline
          aws-region: eu-north-1

      - name: Test AWS Access
        run: aws sts get-caller-identity

      - name: Set Terraform Backend Bucket Name from Env
        id: set-backend
        run: |
          case "${{ github.event.inputs.env }}" in
            dev)
              BUCKET_NAME="dev-statefile-terraform"
              ;;
            qa)
              BUCKET_NAME="qa-statefile-terraform"
              ;;
            sandbox)
              BUCKET_NAME="sandbox-statefile-terraform"
              ;;
            performance)
              BUCKET_NAME="perf-statefile-terraform"
              ;;
            staging)
              BUCKET_NAME="stg-statefile-terraform"
              ;;
            staging-green)
              BUCKET_NAME="stg-green-statefile-terraform"
              ;;
            production)
              # BUCKET_NAME="production-statefile-terraform"
              BUCKET_NAME="poc-terraform-loc"
              ;;
            *)
              echo "Unknown environment: ${{ github.event.inputs.env }}"
              exit 1
              ;;
          esac
          echo "bucket_name=$BUCKET_NAME" >> "$GITHUB_OUTPUT"

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3  
              with:
                terraform_version: "v1.12.2"

            # - name: Enable Terraform Git actions to use Github Apps Token
            #   uses: de-vri-es/setup-git-credentials@v2.0.9
            #   with:
            #     credentials: https://git:${{ steps.get_token.outputs.token }}@github.com
            #   # Doc: https://maelvls.dev/gh-actions-with-tf-private-repo/

      - name: Set Terraform Backend Key
        run: |
          subdomain="${{ matrix.subdomain }}"
          terraform init -reconfigure \
            -backend-config="bucket=shake-shack-terraform-statefile " \
            -backend-config="key=/order/$subdomain/terraform.ftstate" \
            -backend-config="region=eu-north-1" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"                       # Enable state locking =true"
            # -backend-config="dynamodb_table=terraform-locks-dev"

      - name: Terraform Plan for ${{ matrix.subdomain }}
        run: |
          terraform plan \
            -out=plan.tfplan \
            -input=false \
            -no-color

          # Generate a colorized human-readable plan output
          terraform show -color plan.tfplan > plan-${{ matrix.subdomain }}.txt

      - name: Upload Plan Output for ${{ matrix.subdomain }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.subdomain }}
          path: plan-${{ matrix.subdomain }}.txt
