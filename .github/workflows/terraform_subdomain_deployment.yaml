name: Subdomain Matrix Deploy

on:
  workflow_dispatch:
    inputs:
      subdomains:
        description: 'JSON list of subdomains (e.g. ["basket", "order-management"])'
        type: string
        # required: true
      env:
        description: 'Target environment'
        type: choice
        default: production
        options:
          - sandbox
          - dev
          - qa
          - performance
          - staging
          - staging-green
          - production
        required: true
      deploy_common:
        description: 'Common deployment steps'
        required: true
        type: boolean
        default: false

permissions:
  actions: write
  id-token: write
  contents: read

jobs:
  generate-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix-json: ${{ steps.build.outputs.matrix-json }}
      matrix-count: ${{ steps.build.outputs.matrix-count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      # - name: Get GitHub Apps Token # This enables access to Terraform modules in internal/private repos
      #   id: get_token
      #   uses: tibdex/github-app-token@v1.7.0
      #   with:
      #     private_key: ${{ secrets.ORG_REPO_READ_PRIVATE_KEY }}
      #     app_id: ${{ secrets.ORG_REPO_READ_APP_ID }}
      #   # Doc: https://github.com/marketplace/actions/github-app-token

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Generate Matrix
        id: build
        run: |
          SUBDOMAINS='${{ github.event.inputs.subdomains }}'
          TRIMMED=$(echo "$SUBDOMAINS" | tr -d '[:space:]')
          if [ -z "$TRIMMED" ]; then
            MATRIX="[]"
          else
            echo '${{ github.event.inputs.subdomains }}' > subdomains.json
            MATRIX=$(python3 scripts/build_matrix.py '${{ github.event.inputs.subdomains }}' '${{ github.event.inputs.env }}')
          fi
          echo "$MATRIX"
          COUNT=$(printf '%s' "$MATRIX" | jq 'length')
          echo "matrix-json=$MATRIX"  >> "$GITHUB_OUTPUT"
          echo "matrix-count=$COUNT" >> "$GITHUB_OUTPUT"

  terraform-plan:
    name: Deploy ${{ matrix.subdomain }} Subdomain ► ${{ github.event.inputs.env }}
    if: ${{ needs.generate-matrix.outputs.matrix-count > 0 }}
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix-json) }}
    steps:
      - name: Checkout-Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Print Deployment Detailsß
        run: |
          echo "Deploying ${{ matrix.subdomain }} in ${{ matrix.env }}"
          echo "Using AWS Account: ${{ matrix.account_id }}"
          echo "Path: ${{ matrix.path }}"
          echo "Using AWS Account: ${{ matrix.account_name }}"
          # Here you can call terraform, ansible, helm, etc.

      - name: Configure AWS Credentials for reading state
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # role-to-assume: arn:aws:iam::${{ matrix.account_id }}:role/github-workflow-role-tf-deployer
          role-to-assume: arn:aws:iam::${{ matrix.account_id }}:role/github-actions-role
          role-session-name: tf-ami-deployer-pipeline
          aws-region: eu-north-1

      - name: Test AWS Access
        run: aws sts get-caller-identity

      - name: Set Terraform Backend Bucket Name from Env
        id: set-backend
        run: |
          case "${{ github.event.inputs.env }}" in
            dev)
              BUCKET_NAME="dev-statefile-terraform"
              ;;
            qa)
              BUCKET_NAME="qa-statefile-terraform"
              ;;
            sandbox)
              BUCKET_NAME="sandbox-statefile-terraform"
              ;;
            performance)
              BUCKET_NAME="perf-statefile-terraform"
              ;;
            staging)
              BUCKET_NAME="stg-statefile-terraform"
              ;;
            staging-green)
              BUCKET_NAME="stg-green-statefile-terraform"
              ;;
            production)
              # BUCKET_NAME="production-statefile-terraform"
              BUCKET_NAME="poc-terraform-loc"
              ;;
            *)
              echo "Unknown environment: ${{ github.event.inputs.env }}"
              exit 1
              ;;
          esac
          echo "bucket_name=$BUCKET_NAME" >> "$GITHUB_OUTPUT"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3  
        with:
          terraform_version: "v1.12.2"

      # - name: Enable Terraform Git actions to use Github Apps Token
      #   uses: de-vri-es/setup-git-credentials@v2.0.9
      #   with:
      #     credentials: https://git:${{ steps.get_token.outputs.token }}@github.com
      #   # Doc: https://maelvls.dev/gh-actions-with-tf-private-repo/

      - name: Set Terraform Backend Key
        run: |
          subdomain="${{ matrix.subdomain }}"
          terraform init -reconfigure \
            -backend-config="bucket=${{ steps.set-backend.outputs.bucket_name }}" \
            -backend-config="key=order/$subdomain/terraform.tfstate" \
            -backend-config="region=eu-north-1" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"                       # Enable state locking =true"
            # -backend-config="dynamodb_table=terraform-locks-dev"
        working-directory: ${{ matrix.path }}

      - name: Terraform Plan for ${{ matrix.subdomain }}
        run: |

          terraform plan \
            -out=plan-${{ matrix.subdomain }}.tfplan \
            -input=false \
            -var-file=${{ github.event.inputs.env }}/${{ github.event.inputs.env }}.tfvars

          # Generate a colorized human-readable plan output
          terraform show plan-${{ matrix.subdomain }}.tfplan > plan-${{ matrix.subdomain }}.txt
          # terraform show -no-color plan.tfplan >> $GITHUB_STEP_SUMMARY
          terraform show -no-color plan-${{ matrix.subdomain }}.tfplan | grep -E '^  #|^Plan:' | while read -r line; do
            if [[ $line == *"will be created"* ]]; then
              RESOURCE=$(echo "$line" | sed 's/^  # //' | sed 's/ will be created//')
              echo "### ✅ $RESOURCE will be **created**" >> $GITHUB_STEP_SUMMARY
            elif [[ $line == *"will be destroyed"* ]]; then
              RESOURCE=$(echo "$line" | sed 's/^  # //' | sed 's/ will be destroyed//')
              echo "### ❌ $RESOURCE will be **destroyed**" >> $GITHUB_STEP_SUMMARY
            elif [[ $line == *"will be updated in-place"* ]]; then
              RESOURCE=$(echo "$line" | sed 's/^  # //' | sed 's/ will be updated in-place//')
              echo "### 🔁 $RESOURCE will be **updated**" >> $GITHUB_STEP_SUMMARY
            elif [[ $line == Plan:* ]]; then
              echo "**$line**" >> $GITHUB_STEP_SUMMARY
            fi
          done
        working-directory: ${{ matrix.path }}


      - name: Upload Plan Output for ${{ matrix.subdomain }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.subdomain }}
          path: ${{ matrix.path }}/plan-${{ matrix.subdomain }}.tfplan
          if-no-files-found: error

  terraform-apply:
    name: Apply ► ${{ matrix.subdomain }} @ ${{ github.event.inputs.env }}
    if: ${{ needs.generate-matrix.outputs.matrix-count > 0 }}
    runs-on: ubuntu-latest
    needs: [generate-matrix, terraform-plan]   # <-- add generate-matrix here
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix-json) }}
    environment: 
      name: ${{ matrix.env_name }}
    concurrency:
      group: tf-${{ github.event.inputs.env }}-${{ matrix.account_id }}-${{ matrix.subdomain }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Configure AWS Credentials (apply)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ matrix.account_id }}:role/github-actions-role
          role-session-name: tf-apply-session
          aws-region: eu-north-1

      - name: Set TF backend bucket
        id: set-backend
        run: |
          case "${{ github.event.inputs.env }}" in
            dev) BUCKET="dev-statefile-terraform" ;;
            qa) BUCKET="qa-statefile-terraform" ;;
            sandbox) BUCKET="sandbox-statefile-terraform" ;;
            performance) BUCKET="perf-statefile-terraform" ;;
            staging) BUCKET="stg-statefile-terraform" ;;
            staging-green) BUCKET="stg-green-statefile-terraform" ;;
            production) BUCKET="poc-terraform-loc" ;;
            *) echo "Unknown env"; exit 1 ;;
          esac
          echo "bucket_name=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: v1.12.2

      - name: Terraform Init (same backend)
        working-directory: ${{ matrix.path }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ steps.set-backend.outputs.bucket_name }}" \
            -backend-config="key=order/${{ matrix.subdomain }}/terraform.tfstate" \
            -backend-config="region=eu-north-1" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ matrix.subdomain }}
          path: ${{ matrix.path }}
          # if-no-files-found: error

      # (optional) sanity check
      - name: List downloaded files
        run: |
          echo "PWD=$(pwd)"
          ls -lah
          echo "Module dir:"
          ls -lah "${{ matrix.path }}"
      
      - name: Terraform Apply (${{ matrix.subdomain }})
        working-directory: ${{ matrix.path }}
        run: |
          # IMPORTANT: apply the **binary** plan
          test -f "plan-${{ matrix.subdomain }}.tfplan" || { echo "Plan file missing"; exit 1; }
          terraform apply -input=false -no-color plan-${{ matrix.subdomain }}.tfplan

  plan-common:
    name: Plan ► common @ ${{ github.event.inputs.env }}
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_common == 'true' || needs.generate-matrix.outputs.matrix-count > 0 }}
    needs: [generate-matrix, terraform-apply]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
      
      - name: Set TF backend bucket
        id: set-backend
        run: |
          case "${{ github.event.inputs.env }}" in
            dev) 
              BUCKET="dev-statefile-terraform" 
              ACCOUNT_ID="254390148077"
              ;;
            qa) 
              BUCKET="qa-statefile-terraform" 
              ACCOUNT_ID="039871571616"
              ;;
            sandbox) 
              BUCKET="sandbox-statefile-terraform" 
              ACCOUNT_ID="800643485173"
              ;;
            performance) 
              BUCKET="perf-statefile-terraform" 
              ACCOUNT_ID="677977426648"
              ;;
            staging) 
              BUCKET="stg-statefile-terraform" 
              ACCOUNT_ID="649128807268"
              ;;
            staging-green) 
              BUCKET="stg-green-statefile-terraform" 
              ACCOUNT_ID="606184927985"
              ;;
            production) 
              BUCKET="poc-terraform-loc" 
              ACCOUNT_ID="271547279005"
              ;;
            *) echo "Unknown env"; exit 1 ;;
          esac
          echo "bucket_name=$BUCKET" >> "$GITHUB_OUTPUT"
          echo "account_id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"

      - name: Configure AWS Credentials (plan)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ steps.set-backend.outputs.account_id }}:role/github-actions-role
          role-session-name: tf-plan-session
          aws-region: eu-north-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: v1.12.2

      - name: Terraform Init (same backend)
        working-directory: ./common
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ steps.set-backend.outputs.bucket_name }}" \
            -backend-config="key=order/common/terraform.tfstate" \
            -backend-config="region=eu-north-1" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"

      - name: Terraform Plan Common
        working-directory: ./common
        run: |

          terraform plan \
            -out=plan-common.tfplan \
            -input=false \
            -var-file=${{ github.event.inputs.env }}/${{ github.event.inputs.env }}.tfvars

          # Generate a colorized human-readable plan output
          terraform show plan-common.tfplan > plan-common.txt
          # terraform show -no-color plan.tfplan >> $GITHUB_STEP_SUMMARY
          terraform show -no-color plan-common.tfplan | grep -E '^  #|^Plan:' | while read -r line; do
            if [[ $line == *"will be created"* ]]; then
              RESOURCE=$(echo "$line" | sed 's/^  # //' | sed 's/ will be created//')
              echo "### ✅ $RESOURCE will be **created**" >> $GITHUB_STEP_SUMMARY
            elif [[ $line == *"will be destroyed"* ]]; then
              RESOURCE=$(echo "$line" | sed 's/^  # //' | sed 's/ will be destroyed//')
              echo "### ❌ $RESOURCE will be **destroyed**" >> $GITHUB_STEP_SUMMARY
            elif [[ $line == *"will be updated in-place"* ]]; then
              RESOURCE=$(echo "$line" | sed 's/^  # //' | sed 's/ will be updated in-place//')
              echo "### 🔁 $RESOURCE will be **updated**" >> $GITHUB_STEP_SUMMARY
            elif [[ $line == Plan:* ]]; then
              echo "**$line**" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Upload Plan Output for Common
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-common
          path: ./common/plan-common.tfplan
          if-no-files-found: error

  plan-common-only:
    name: Plan ► common-only @ ${{ github.event.inputs.env }}
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_common == 'true' || needs.generate-matrix.outputs.matrix-count == 0 }}
    needs: [generate-matrix]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
      
      - name: Set TF backend bucket
        id: set-backend
        run: |
          case "${{ github.event.inputs.env }}" in
            dev) 
              BUCKET="dev-statefile-terraform" 
              ACCOUNT_ID="254390148077"
              ;;
            qa) 
              BUCKET="qa-statefile-terraform" 
              ACCOUNT_ID="039871571616"
              ;;
            sandbox) 
              BUCKET="sandbox-statefile-terraform" 
              ACCOUNT_ID="800643485173"
              ;;
            performance) 
              BUCKET="perf-statefile-terraform" 
              ACCOUNT_ID="677977426648"
              ;;
            staging) 
              BUCKET="stg-statefile-terraform" 
              ACCOUNT_ID="649128807268"
              ;;
            staging-green) 
              BUCKET="stg-green-statefile-terraform" 
              ACCOUNT_ID="606184927985"
              ;;
            production) 
              BUCKET="poc-terraform-loc" 
              ACCOUNT_ID="271547279005"
              ;;
            *) echo "Unknown env"; exit 1 ;;
          esac
          echo "bucket_name=$BUCKET" >> "$GITHUB_OUTPUT"
          echo "account_id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"

      - name: Configure AWS Credentials (plan)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ steps.set-backend.outputs.account_id }}:role/github-actions-role
          role-session-name: tf-plan-session
          aws-region: eu-north-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: v1.12.2

      - name: Terraform Init (same backend)
        working-directory: ./common
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ steps.set-backend.outputs.bucket_name }}" \
            -backend-config="key=order/common/terraform.tfstate" \
            -backend-config="region=eu-north-1" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"

      - name: Terraform Plan Common
        working-directory: ./common
        run: |

          terraform plan \
            -out=plan-common.tfplan \
            -input=false \
            -var-file=${{ github.event.inputs.env }}/${{ github.event.inputs.env }}.tfvars

          # Generate a colorized human-readable plan output
          terraform show plan-common.tfplan > plan-common.txt
          # terraform show -no-color plan.tfplan >> $GITHUB_STEP_SUMMARY
          terraform show -no-color plan-common.tfplan | grep -E '^  #|^Plan:' | while read -r line; do
            if [[ $line == *"will be created"* ]]; then
              RESOURCE=$(echo "$line" | sed 's/^  # //' | sed 's/ will be created//')
              echo "### ✅ $RESOURCE will be **created**" >> $GITHUB_STEP_SUMMARY
            elif [[ $line == *"will be destroyed"* ]]; then
              RESOURCE=$(echo "$line" | sed 's/^  # //' | sed 's/ will be destroyed//')
              echo "### ❌ $RESOURCE will be **destroyed**" >> $GITHUB_STEP_SUMMARY
            elif [[ $line == *"will be updated in-place"* ]]; then
              RESOURCE=$(echo "$line" | sed 's/^  # //' | sed 's/ will be updated in-place//')
              echo "### 🔁 $RESOURCE will be **updated**" >> $GITHUB_STEP_SUMMARY
            elif [[ $line == Plan:* ]]; then
              echo "**$line**" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Upload Plan Output for Common
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-common
          path: ./common/plan-common.tfplan