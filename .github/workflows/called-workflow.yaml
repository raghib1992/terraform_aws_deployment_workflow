name: Terraform Infrastructure Deploy

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      subdomains:
        required: true
        type: string
      deploy_common:
        required: false
        type: string
        default: 'false'
      targetResource:
        required: false
        type: string
        default: 'null'

    secrets:
      ORG_REPO_READ_PRIVATE_KEY:
        required: true
      ORG_REPO_READ_APP_ID:
        required: true
    outputs:
      matrix-json:
        description: "The generated matrix JSON"
        value: ${{ jobs.generate-matrix.outputs.matrix-json }}
      matrix-count:
        description: "The number of matrix items"
        value: ${{ jobs.generate-matrix.outputs.matrix-count }}
      bucket_name:
        description: "The bucket name"
        value: ${{ jobs.generate-matrix.outputs.bucket_name }}
      account_id:
        description: "The account id"
        value: ${{ jobs.generate-matrix.outputs.account_id }}
      account_name:
        description: "The account name"
        value: ${{ jobs.generate-matrix.outputs.account_name }}
      domain_name:
        description: "The domain name"
        value: ${{ jobs.generate-matrix.outputs.domain_name }}

jobs:
  generate-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix-json: ${{ steps.build.outputs.matrix-json }}
      run_matrix: ${{ steps.build.outputs.run_matrix }}
      account_id: ${{ steps.build.outputs.account_id }}
      account_name: ${{ steps.build.outputs.account_name }}
      bucket_name: ${{ steps.build.outputs.bucket_name }}
      domain_name: ${{ steps.build.outputs.domain_name }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Validate subdomain folders
        run: |
          echo '${{ inputs.subdomains }}' | jq -r '.[]' | while read sub; do
            if [ ! -d "$sub" ]; then
              echo "❌ Sub Domain '$sub' does not exist in the repository." >> "$GITHUB_STEP_SUMMARY"
              exit 1
            fi
          done
          # echo "✅ All subdomain folders exist."

      # Take env variable from inputs which has ref from caller inputs
      - name: Generate Matrix
        id: build
        run: |
          # Get Repo Name First Word to Use in terraform Backend key
          REPO_FULL="${{ github.event.repository.full_name }}"
          REPO_NAME="${REPO_FULL##*/}"
          FIRST_WORD="${REPO_NAME%%-*}"
          echo "First word from repo name: $FIRST_WORD"

          # Check the inputs for subdomain to run matrix or not       
          SUBDOMAINS='${{ inputs.subdomains }}'
          TRIMMED=$(echo "$SUBDOMAINS" | tr -d '[:space:]')
          if [ -z "$TRIMMED" ]; then
            RUN_MATRIX='false'
          else
            RUN_MATRIX='true'
          fi
            
          MATRIX=$(python3 scripts/build_matrix_2.py '${{ inputs.subdomains }}' '${{ inputs.env }}')
          BUCKET=$(echo "$MATRIX" | jq -r '.[0].bucket_name')
          ACCOUNT_ID=$(echo "$MATRIX" | jq -r '.[0].account_id')
          ACCOUNT_NAME=$(echo "$MATRIX" | jq -r '.[0].account_name')
          echo "$MATRIX"
          echo "run_matrix=$RUN_MATRIX" >> "$GITHUB_OUTPUT"
          echo "matrix-json=$MATRIX"  >> "$GITHUB_OUTPUT"
          echo "bucket_name=$BUCKET" >> "$GITHUB_OUTPUT"
          echo "account_id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"
          echo "account_name=$ACCOUNT_NAME" >> "$GITHUB_OUTPUT"
          echo "domain_name=$FIRST_WORD" >> "$GITHUB_OUTPUT"

  terraform-plan:
    name: Plan ► ${{ matrix.subdomain }} Subdomain @ ${{ inputs.env }} Environment
    if: ${{ needs.generate-matrix.outputs.run_matrix == 'true' }}
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix-json) }}
    steps:
      - name: Checkout-Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Print Deployment Details
        run: |
          echo "Deploying ${{ matrix.subdomain }} in ${{ matrix.env }}"
          echo "Using AWS Account: ${{ needs.generate-matrix.outputs.account_id }}"
          echo "Path: ${{ matrix.path }}"
          echo "Using AWS Account: ${{ needs.generate-matrix.outputs.account_name }}"

      - name: Get GitHub Apps Token
        id: get_token
        uses: tibdex/github-app-token@v2
        with:
          private_key: ${{ secrets.ORG_REPO_READ_PRIVATE_KEY }}
          app_id: ${{ secrets.ORG_REPO_READ_APP_ID }}

      - name: Enable Terraform Git actions to use Github Apps Token
        uses: de-vri-es/setup-git-credentials@v2.0.9
        with:
          credentials: https://git:${{ steps.get_token.outputs.token }}@github.com
      
      - name: Configure AWS Credentials for reading state
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ needs.generate-matrix.outputs.account_id }}:role/github-workflow-role-tf-deployer
          role-session-name: tf-ami-deployer-pipeline
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3  
        with:
          terraform_version: "v1.12.2"
          terraform_wrapper: false

      - name: Set Terraform Backend Key
        working-directory: ${{ matrix.path }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ needs.generate-matrix.outputs.bucket_name }}" \
            -backend-config="key=${{ needs.generate-matrix.outputs.domain_name }}/${{ matrix.subdomain }}/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"

      - name: Terraform Plan for ${{ matrix.subdomain }}
        if: ${{ inputs.targetResource == 'null' }}
        working-directory: ${{ matrix.path }}
        run: |
          set +e
          terraform plan \
            -out=plan-${{ matrix.subdomain }}.tfplan \
            -input=false \
            -var-file=${{ inputs.env }}/${{ inputs.env }}.tfvars \
            -no-color \
            -detailed-exitcode


          EXIT_CODE=$?
          echo "Terraform exit code: $EXIT_CODE"

          if [ "$EXIT_CODE" -eq 0 ]; then
            echo "⛔ **No changes. Your infrastructure matches the configuration.**" >> "$GITHUB_STEP_SUMMARY"
          elif [ "$EXIT_CODE" -eq 2 ]; then
            terraform show -no-color plan-${{ matrix.subdomain }}.tfplan |
            awk '
              /^  # / {
                line=$0
                sub(/^  # /,"",line)                        # strip leading "  # "
                addr=line
                sub(/ (will be|must be) .*/,"",addr)        # remove trailing " will be ..." / " must be ..."
                act="other"
                if (line ~ /will be created/)              act="create";
                else if (line ~ /will be destroyed/)       act="destroy";
                else if (line ~ /will be updated in-place/)act="update";
                else if (line ~ /(must be|will be) replaced/) act="replace";

                # Short address: strip module prefixes like module.foo. or module.bar[0].
                short=addr
                gsub(/(^|\.)module\.[^.]+(\[[0-9]+\])?(\.|$)/,".",short)
                gsub(/\.\./,".",short); sub(/^\./,"",short); sub(/\.$/,"",short)

                printf "%s\t%s\t%s\n", act, addr, short
              }
            ' |
            while IFS=$'\t' read -r act addr short; do
              case "$act" in
                create)  echo "### ✅ \`$short\` *(full: \`$addr\`)* will be **created**"   >> "$GITHUB_STEP_SUMMARY" ;;
                update)  echo "### 🔁 \`$short\` *(full: \`$addr\`)* will be **updated**"   >> "$GITHUB_STEP_SUMMARY" ;;
                destroy) echo "### ❌ \`$short\` *(full: \`$addr\`)* will be **destroyed**" >> "$GITHUB_STEP_SUMMARY" ;;
                replace) echo "### ♻️  \`$short\` *(full: \`$addr\`)* will be **replaced**" >> "$GITHUB_STEP_SUMMARY" ;;
                *)       echo "### ℹ️  \`$short\` *(full: \`$addr\`)* action: $act"         >> "$GITHUB_STEP_SUMMARY" ;;
              esac
            done
            terraform show -no-color plan-${{ matrix.subdomain }}.tfplan | grep '^Plan:' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Terraform plan failed."
            exit 1
          fi

      - name: Generate Target Resource Arguments
        if: inputs.targetResource != 'null'
        id: generate-target-args
        run: |
          TARGET_RESOURCES=$(echo "${{ inputs.targetResource }}" | tr ',' ' ')
          TARGET_ARGS=""
          for resource in $TARGET_RESOURCES; do
            TARGET_ARGS="$TARGET_ARGS -target=$resource"
          done
          echo "TARGET_ARGS=$TARGET_ARGS" >> $GITHUB_ENV

      - name: Targeted Terraform Plan for ${{ matrix.subdomain }}
        if: inputs.targetResource != 'null'
        working-directory: ${{ matrix.path }}
        run: |
          set +e
          terraform plan \
            -out=plan-${{ matrix.subdomain }}.tfplan \
            -input=false \
            -no-color \
            -var-file=${{ inputs.env }}/${{ inputs.env }}.tfvars \
            -detailed-exitcode \
            ${{ env.TARGET_ARGS }}


          EXIT_CODE=$?
          echo "Terraform exit code: $EXIT_CODE"

          if [ "$EXIT_CODE" -eq 0 ]; then
            echo "⛔ **No changes. Your infrastructure matches the configuration.**" >> "$GITHUB_STEP_SUMMARY"
          elif [ "$EXIT_CODE" -eq 2 ]; then
            terraform show -no-color plan-${{ matrix.subdomain }}.tfplan |
            awk '
              /^  # / {
                line=$0
                sub(/^  # /,"",line)                        # strip leading "  # "
                addr=line
                sub(/ (will be|must be) .*/,"",addr)        # remove trailing " will be ..." / " must be ..."
                act="other"
                if (line ~ /will be created/)              act="create";
                else if (line ~ /will be destroyed/)       act="destroy";
                else if (line ~ /will be updated in-place/)act="update";
                else if (line ~ /(must be|will be) replaced/) act="replace";

                # Short address: strip module prefixes like module.foo. or module.bar[0].
                short=addr
                gsub(/(^|\.)module\.[^.]+(\[[0-9]+\])?(\.|$)/,".",short)
                gsub(/\.\./,".",short); sub(/^\./,"",short); sub(/\.$/,"",short)

                printf "%s\t%s\t%s\n", act, addr, short
              }
            ' |
            while IFS=$'\t' read -r act addr short; do
              case "$act" in
                create)  echo "### ✅ \`$short\` *(full: \`$addr\`)* will be **created**"   >> "$GITHUB_STEP_SUMMARY" ;;
                update)  echo "### 🔁 \`$short\` *(full: \`$addr\`)* will be **updated**"   >> "$GITHUB_STEP_SUMMARY" ;;
                destroy) echo "### ❌ \`$short\` *(full: \`$addr\`)* will be **destroyed**" >> "$GITHUB_STEP_SUMMARY" ;;
                replace) echo "### ♻️  \`$short\` *(full: \`$addr\`)* will be **replaced**" >> "$GITHUB_STEP_SUMMARY" ;;
                *)       echo "### ℹ️  \`$short\` *(full: \`$addr\`)* action: $act"         >> "$GITHUB_STEP_SUMMARY" ;;
              esac
            done
            terraform show -no-color plan-${{ matrix.subdomain }}.tfplan | grep '^Plan:' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Terraform plan failed."
            exit 1
          fi

      - name: Upload Plan Output for ${{ matrix.subdomain }}
        uses: actions/upload-artifact@v4
        with:
          name: plan-${{ matrix.subdomain }}
          path: ${{ matrix.path }}/plan-${{ matrix.subdomain }}.tfplan
          if-no-files-found: error

  terraform-apply:
    name: Apply ► ${{ matrix.subdomain }} @ ${{ inputs.env }} Environment
    if: needs.generate-matrix.outputs.run_matrix == 'true'
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.plan_check.outputs.has_changes }}
    needs: [generate-matrix, terraform-plan]
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix-json) }}
    environment: 
      name: ${{ inputs.env }}
    concurrency:
      group: tf-${{ inputs.env }}-${{ needs.generate-matrix.outputs.account_id }}-${{ matrix.subdomain }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Get GitHub Apps Token 
        id: get_token
        uses: tibdex/github-app-token@v2
        with:
          private_key: ${{ secrets.ORG_REPO_READ_PRIVATE_KEY }}
          app_id: ${{ secrets.ORG_REPO_READ_APP_ID }}

      - name: Enable Terraform Git actions to use Github Apps Token
        uses: de-vri-es/setup-git-credentials@v2.0.9
        with:
          credentials: https://git:${{ steps.get_token.outputs.token }}@github.com

      - name: Configure AWS Credentials (apply)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ needs.generate-matrix.outputs.account_id }}:role/github-workflow-role-tf-deployer
          role-session-name: tf-apply-session
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: v1.12.2

      - name: Terraform Init (same backend)
        working-directory: ${{ matrix.path }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ needs.generate-matrix.outputs.bucket_name }}" \
            -backend-config="key=${{ needs.generate-matrix.outputs.domain_name }}/${{ matrix.subdomain }}/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: plan-${{ matrix.subdomain }}
          path: ${{ matrix.path }}
        continue-on-error: false

      - name: Check if plan has changes
        id: plan_check
        working-directory: ${{ matrix.path }}
        run: |
          set +e
          PLAN_OUTPUT=$(terraform show -no-color plan-${{ matrix.subdomain }}.tfplan)
          if echo "$PLAN_OUTPUT" | grep -q 'No changes. Your infrastructure matches the configuration.'; then
            echo "No changes detected in the plan."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          elif echo "$PLAN_OUTPUT" | grep -q 'Plan: 0 to add, 0 to change, 0 to destroy'; then
            echo "No changes detected in the plan."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in the plan."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply (${{ matrix.subdomain }})
        if: steps.plan_check.outputs.has_changes == 'true'
        working-directory: ${{ matrix.path }}
        run: |
          test -f "plan-${{ matrix.subdomain }}.tfplan" || { echo "Plan file missing"; exit 1; }
          terraform apply -input=false -no-color plan-${{ matrix.subdomain }}.tfplan

  plan-common:
    name: Plan ► common @ ${{ inputs.env }} Environment
    runs-on: ubuntu-latest
    if: ${{ always() && inputs.deploy_common == 'true' && (needs.terraform-apply.result == 'success' || needs.terraform-apply.result == 'skipped') }}
    needs: [generate-matrix, terraform-plan, terraform-apply]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Debug needs context
        run: |
          echo "All needs context:"
          echo "${{ toJson(needs) }}"

      - name: Print Deployment Details
        run: |
          echo "Using AWS Account: ${{ needs.generate-matrix.outputs.account_id }}"
          echo "Using Bucket: ${{ needs.generate-matrix.outputs.bucket_name }}"
          echo "Using AWS Account: ${{ needs.generate-matrix.outputs.account_name }}"

      - name: Get GitHub Apps Token 
        id: get_token
        uses: tibdex/github-app-token@v2
        with:
          private_key: ${{ secrets.ORG_REPO_READ_PRIVATE_KEY }}
          app_id: ${{ secrets.ORG_REPO_READ_APP_ID }}

      - name: Enable Terraform Git actions to use Github Apps Token
        uses: de-vri-es/setup-git-credentials@v2.0.9
        with:
          credentials: https://git:${{ steps.get_token.outputs.token }}@github.com

      - name: Configure AWS Credentials (plan)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ needs.generate-matrix.outputs.account_id }}:role/github-workflow-role-tf-deployer
          role-session-name: tf-plan-session
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: v1.12.2
          terraform_wrapper: false

      - name: Terraform Init (same backend)
        working-directory: ./common
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ needs.generate-matrix.outputs.bucket_name }}" \
            -backend-config="key=${{ needs.generate-matrix.outputs.domain_name }}/common/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"

      - name: Terraform Plan Common
        if: ${{ inputs.targetResource == 'null' }}
        working-directory: ./common
        run: |
          set +e
          terraform plan \
            -out=plan-common.tfplan \
            -input=false \
            -no-color \
            -var-file=${{ inputs.env }}/${{ inputs.env }}.tfvars \
            -detailed-exitcode

          EXIT_CODE=$?
          echo "Terraform exit code: $EXIT_CODE"

          if [ "$EXIT_CODE" -eq 0 ]; then
            echo "⛔ **No changes. Your infrastructure matches the configuration.**" >> "$GITHUB_STEP_SUMMARY"
          elif [ "$EXIT_CODE" -eq 2 ]; then
            terraform show -no-color plan-common.tfplan |
            awk '
              /^  # / {
                line=$0
                sub(/^  # /,"",line)                        # strip leading "  # "
                addr=line
                sub(/ (will be|must be) .*/,"",addr)        # remove trailing " will be ..." / " must be ..."
                act="other"
                if (line ~ /will be created/)              act="create";
                else if (line ~ /will be destroyed/)       act="destroy";
                else if (line ~ /will be updated in-place/)act="update";
                else if (line ~ /(must be|will be) replaced/) act="replace";

                # Short address: strip module prefixes like module.foo. or module.bar[0].
                short=addr
                gsub(/(^|\.)module\.[^.]+(\[[0-9]+\])?(\.|$)/,".",short)
                gsub(/\.\./,".",short); sub(/^\./,"",short); sub(/\.$/,"",short)

                printf "%s\t%s\t%s\n", act, addr, short
              }
            ' |
            while IFS=$'\t' read -r act addr short; do
              case "$act" in
                create)  echo "### ✅ \`$short\` *(full: \`$addr\`)* will be **created**"   >> "$GITHUB_STEP_SUMMARY" ;;
                update)  echo "### 🔁 \`$short\` *(full: \`$addr\`)* will be **updated**"   >> "$GITHUB_STEP_SUMMARY" ;;
                destroy) echo "### ❌ \`$short\` *(full: \`$addr\`)* will be **destroyed**" >> "$GITHUB_STEP_SUMMARY" ;;
                replace) echo "### ♻️  \`$short\` *(full: \`$addr\`)* will be **replaced**" >> "$GITHUB_STEP_SUMMARY" ;;
                *)       echo "### ℹ️  \`$short\` *(full: \`$addr\`)* action: $act"         >> "$GITHUB_STEP_SUMMARY" ;;
              esac
            done
            terraform show -no-color plan-common.tfplan | grep '^Plan:' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Terraform plan failed."
            exit 1
          fi
      
      - name: Generate Target Resource Arguments
        if: inputs.targetResource != 'null'
        id: generate-target-args
        run: |
          TARGET_RESOURCES=$(echo "${{ inputs.targetResource }}" | tr ',' ' ')
          TARGET_ARGS=""
          for resource in $TARGET_RESOURCES; do
            TARGET_ARGS="$TARGET_ARGS -target=$resource"
          done
          echo "TARGET_ARGS=$TARGET_ARGS" >> $GITHUB_ENV

      - name: Targeted Terraform Plan for Common
        if: inputs.targetResource != 'null'
        working-directory: ${{ matrix.path }}
        run: |
          set +e
          terraform plan \
            -out=plan-common.tfplan \
            -input=false \
            -no-color \
            -var-file=${{ inputs.env }}/${{ inputs.env }}.tfvars \
            -detailed-exitcode \
            ${{ env.TARGET_ARGS }}


          EXIT_CODE=$?
          echo "Terraform exit code: $EXIT_CODE"

          if [ "$EXIT_CODE" -eq 0 ]; then
            echo "⛔ **No changes. Your infrastructure matches the configuration.**" >> "$GITHUB_STEP_SUMMARY"
          elif [ "$EXIT_CODE" -eq 2 ]; then
            terraform show -no-color plan-common.tfplan |
            awk '
              /^  # / {
                line=$0
                sub(/^  # /,"",line)                        # strip leading "  # "
                addr=line
                sub(/ (will be|must be) .*/,"",addr)        # remove trailing " will be ..." / " must be ..."
                act="other"
                if (line ~ /will be created/)              act="create";
                else if (line ~ /will be destroyed/)       act="destroy";
                else if (line ~ /will be updated in-place/)act="update";
                else if (line ~ /(must be|will be) replaced/) act="replace";

                # Short address: strip module prefixes like module.foo. or module.bar[0].
                short=addr
                gsub(/(^|\.)module\.[^.]+(\[[0-9]+\])?(\.|$)/,".",short)
                gsub(/\.\./,".",short); sub(/^\./,"",short); sub(/\.$/,"",short)

                printf "%s\t%s\t%s\n", act, addr, short
              }
            ' |
            while IFS=$'\t' read -r act addr short; do
              case "$act" in
                create)  echo "### ✅ \`$short\` *(full: \`$addr\`)* will be **created**"   >> "$GITHUB_STEP_SUMMARY" ;;
                update)  echo "### 🔁 \`$short\` *(full: \`$addr\`)* will be **updated**"   >> "$GITHUB_STEP_SUMMARY" ;;
                destroy) echo "### ❌ \`$short\` *(full: \`$addr\`)* will be **destroyed**" >> "$GITHUB_STEP_SUMMARY" ;;
                replace) echo "### ♻️  \`$short\` *(full: \`$addr\`)* will be **replaced**" >> "$GITHUB_STEP_SUMMARY" ;;
                *)       echo "### ℹ️  \`$short\` *(full: \`$addr\`)* action: $act"         >> "$GITHUB_STEP_SUMMARY" ;;
              esac
            done
            terraform show -no-color plan-common.tfplan | grep '^Plan:' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Terraform plan failed."
            exit 1
          fi
      
      - name: Upload Plan Output for Common
        uses: actions/upload-artifact@v4
        with:
          name: plan-common
          path: ./common/plan-common.tfplan
          if-no-files-found: error

  apply-common:
    name: Apply ► common @ ${{ inputs.env }} Environment
    runs-on: ubuntu-latest
    if: ${{ always() && inputs.deploy_common == 'true' && needs.plan-common.result == 'success' }}
    needs: [generate-matrix, plan-common]
    environment: 
      name: ${{ inputs.env }}
    outputs:
      has_changes: ${{ steps.plan_check.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Get GitHub Apps Token 
        id: get_token
        uses: tibdex/github-app-token@v2
        with:
          private_key: ${{ secrets.ORG_REPO_READ_PRIVATE_KEY }}
          app_id: ${{ secrets.ORG_REPO_READ_APP_ID }}

      - name: Enable Terraform Git actions to use Github Apps Token
        uses: de-vri-es/setup-git-credentials@v2.0.9
        with:
          credentials: https://git:${{ steps.get_token.outputs.token }}@github.com

      - name: Configure AWS Credentials (apply)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ needs.generate-matrix.outputs.account_id }}:role/github-workflow-role-tf-deployer
          role-session-name: tf-apply-session
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: v1.12.2

      - name: Terraform Init (same backend)
        working-directory: ./common
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ needs.generate-matrix.outputs.bucket_name }}" \
            -backend-config="key=${{ needs.generate-matrix.outputs.domain_name }}/common/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: plan-common
          path: ./common

      - name: Check if plan has changes
        id: plan_check
        working-directory: ./common
        run: |
          set +e
          PLAN_OUTPUT=$(terraform show -no-color plan-common.tfplan)
          if echo "$PLAN_OUTPUT" | grep -q 'No changes. Your infrastructure matches the configuration.'; then
            echo "No changes detected in the plan."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          elif echo "$PLAN_OUTPUT" | grep -q 'Plan: 0 to add, 0 to change, 0 to destroy'; then
            echo "No changes detected in the plan."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in the plan."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Terraform Apply (common)
        if: ${{ steps.plan_check.outputs.has_changes == 'true' }}
        working-directory: ./common
        run: |
          test -f "plan-common.tfplan" || { echo "Plan file missing"; exit 1; }
          terraform apply -input=false -no-color plan-common.tfplan