name: CI - Scan Terraform Files

on:
  pull_request:
    paths:
      - '**/*.tf'
      - '**/*.tfvars'

jobs:
  discover_changed_tf_folders:
    name: Discover changed Terraform folders
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.set-matrix.outputs.has_changes }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute changed folders and build matrix JSON (top-level only)
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail

          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          # Find changed Terraform files
          mapfile -t files < <(git diff --name-only "$BASE_SHA" "$HEAD_SHA" -- '**/*.tf' '**/*.tfvars' | sed 's#^./##')

          if [ ${#files[@]} -eq 0 ]; then
            echo "No Terraform changes detected."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo 'matrix=[]' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Get unique directories for changed files
          dirs=$(printf '%s\n' "${files[@]}" | xargs -n1 dirname | sort -u)

          echo "Changed dirs (raw):"
          printf '%s\n' "$dirs"

          # Map each dir to its TOP-LEVEL parent:
          # - "fake-folder/dev"  -> "fake-folder"
          # - "delivery"         -> "delivery"
          # - "." (repo root)    -> "."
          toplevel=$(while IFS= read -r d; do
            [ -z "$d" ] && continue
            if [ "$d" = "." ]; then
              echo "."
            else
              echo "${d%%/*}"
            fi
          done <<< "$dirs" | sort -u)

          echo "Top-level dirs:"
          printf '%s\n' "$toplevel"

          # Build matrix as: [{"dir":"folder1"},{"dir":"folder2"}]
          if [ -z "$toplevel" ]; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo 'matrix=[]' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          json_matrix=$(printf '%s\n' "$toplevel" | jq -R '{dir: .}' | jq -s -c '.')
          echo "Generated matrix: $json_matrix"

          echo "has_changes=true" >> "$GITHUB_OUTPUT"
          printf 'matrix=%s\n' "$json_matrix" >> "$GITHUB_OUTPUT"

  terraform_scan:
    name: Terraform CI • ${{ matrix.dir }}
    needs: discover_changed_tf_folders
    if: needs.discover_changed_tf_folders.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.discover_changed_tf_folders.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Change to Terraform directory
        run: |
          pwd 
          ls -ltra
          if [ "${{ matrix.dir }}" != "." ]; then
            cd "${{ matrix.dir }}"
            ls -ltra
            git branch
          fi
        shell: bash

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Setup TFLint (with plugin cache)
        uses: terraform-linters/setup-tflint@v4 
  
      - name: Ensure local reports dir (inside working directory)
        working-directory: ${{ matrix.dir }}
        shell: bash
        run: mkdir -p reports

       # ---------- Terraform basic checks ----------
      - name: Terraform fmt (recursive, report; don’t fail on code 3)
        id: tf-fmt
        working-directory: ${{ matrix.dir }}
        shell: bash
        run: |
          set +e
          OUT="$(terraform fmt -check -recursive -diff -no-color 2>&1)"
          CODE=$?
          set -e

          printf '%s\n' "$OUT" > "reports/terraform-fmt.txt"

      - name: Terraform init (no backend)
        working-directory: ${{ matrix.dir }}
        run: terraform init -input=false -backend=false

      - name: Terraform validate
        working-directory: ${{ matrix.dir }}
        run: terraform validate -no-color

      # ---------- TFLint (with SARIF) ----------
      - name: TFLint init (plugins)
        working-directory: ${{ matrix.dir }}
        run: tflint --init

      - name: TFLint run (recursive, SARIF; don’t fail on exit 2)
        working-directory: ${{ matrix.dir }}
        shell: bash
        run: |
          set -o pipefail
          # SARIF for Code Scanning UI
          tflint --recursive -f sarif > "reports/tflint.sarif"

          # Console logs
          set +e
          tflint --recursive -f compact
          exit_code=$?
          set -e

      # ---- Trivy (IaC security & misconfigs) ----
      # Option A: Use the Trivy Action for IaC config scanning
      - name: Trivy config scan (IaC) - recursive
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: ${{ matrix.dir }}
          hide-progress: true
          format: 'sarif'
          output: ${{ matrix.dir }}/reports/trivy.sarif
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      # Optionally, you can also run from CLI if you prefer:
      # - name: Install Trivy (CLI)
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y wget apt-transport-https gnupg lsb-release
      #     wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      #     echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
      #     sudo apt-get update
      #     sudo apt-get install -y trivy
      #
      # - name: Trivy config scan (IaC) - CLI
      #   working-directory: ${{ matrix.dir }}
      #   run: trivy config --recursive --severity HIGH,CRITICAL --format sarif --output ../trivy-${{ matrix.dir }}.sarif .

      # ---------- Upload SARIF to Code Scanning ----------
      - name: Upload terraform fmt report (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-fmt-${{ matrix.dir }}
          path: ${{ matrix.dir }}/reports/terraform-fmt.txt
          if-no-files-found: warn
      
      - name: Upload TFLint SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ matrix.dir }}/reports/tflint.sarif

      - name: Upload Trivy SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ matrix.dir }}/reports/trivy.sarif
