name: CI - Scan Terraform Files

on:
  pull_request:
    paths:
      - '**/*.tf'
      - '**/*.tfvars'

jobs:
  discover_changed_tf_folders:
    name: Discover changed Terraform folders
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.set-matrix.outputs.has_changes }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute changed folders and build matrix JSON
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail

          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          # Find changed Terraform files
          mapfile -t files < <(git diff --name-only "$BASE_SHA" "$HEAD_SHA" -- '**/*.tf' '**/*.tfvars' | sed 's#^./##')

          if [ ${#files[@]} -eq 0 ]; then
            echo "No Terraform changes detected."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo 'matrix=[]' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Unique directories that contain changed files
          # Then sort by path length ASC so parents come before children
          dirs=$(printf '%s\n' "${files[@]}" \
            | xargs -n1 dirname \
            | sort -u \
            | awk '{print length, $0}' \
            | sort -n \
            | cut -d" " -f2-)

          echo "Changed dirs (pre-prune):"
          printf '%s\n' "$dirs"

          # Prune nested dirs: keep a dir only if no kept parent is a prefix of it
          pruned=()
          while IFS= read -r d; do
            [ -z "$d" ] && continue
            skip=false
            for p in "${pruned[@]}"; do
              case "$d/" in
                "$p/"*) skip=true; break ;;
              esac
            done
            if ! $skip; then
              pruned+=("$d")
            fi
          done <<< "$dirs"

          echo "Dirs after pruning nested paths:"
          printf '%s\n' "${pruned[@]}"

          # Build matrix as: [{"dir":"folder1"},{"dir":"folder2"}]
          if [ ${#pruned[@]} -eq 0 ]; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo 'matrix=[]' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          json_matrix=$(printf '%s\n' "${pruned[@]}" | jq -R '{dir: .}' | jq -s -c '.')
          echo "Generated matrix: $json_matrix"

          echo "has_changes=true" >> "$GITHUB_OUTPUT"
          printf 'matrix=%s\n' "$json_matrix" >> "$GITHUB_OUTPUT"



  # terraform-scan:
  #   name: Scan â–º ${{ matrix.subdomain }} Subdomain
  #   runs-on: ubuntu-latest
  #   needs: generate-matrix
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       dir: ${{ fromJson(needs.generate-matrix.outputs.dirs) }}
  #   steps:
  #     - name: Checkout-Code
  #       uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.ref_name }}

  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.12.2"

  #     - name: Terraform fmt (check)
  #       run: terraform fmt -check -recursive
  #       working-directory: ${{ matrix.path }}

  #     # Use -backend=false to avoid touching remote backends/creds in CI lint stage
  #     - name: Terraform init (no backend)
  #       run: terraform init -backend=false
  #       working-directory: ${{ matrix.path }}

  #     - name: Terraform validate
  #       run: terraform validate -no-color
  #       working-directory: ${{ matrix.path }}

  #     # ---------- TFLint ----------
  #     - name: Set up TFLint
  #       uses: terraform-linters/setup-tflint@v4

  #     - name: TFLint init (plugins)
  #       run: tflint --init
  #       working-directory: ${{ matrix.path }}

  #     - name: Run TFLint
  #       run: tflint --recursive
  #       working-directory: ${{ matrix.path }}
  #       # Add --format=compact for shorter output, or --config=.tflint.hcl if needed

  #     # ---------- tfsec ----------
  #     # Runs tfsec in Docker so you don't need to install it on the runner
  #     - name: Run tfsec (generate SARIF)
  #       working-directory: ${{ matrix.path }}
  #       run: |
  #         docker run --rm -v "$PWD":/src aquasec/tfsec:latest \
  #           /src --no-module-download --soft-fail=false \
  #           --format sarif --out tfsec.sarif

  #     # Optional: upload SARIF so findings show up in GitHub "Code scanning alerts"
  #     - name: Upload tfsec results to GitHub Code Scanning
  #       if: always()  # still upload even if previous steps failed
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: ${{ github.workspace }}/tfsec.sarif