name: CI - Scan Terraform Files

on:
  pull_request:
    paths:
      - '**/*.tf'
      - '**/*.tfvars'

jobs:
  discover_changed_tf_folders:
    name: Discover changed Terraform folders
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.set-matrix.outputs.has_changes }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute changed folders and build matrix JSON
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail

          # Determine the diff range (PR base..head)
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"

          # List changed Terraform files
          mapfile -t files < <(git diff --name-only "$BASE_SHA" "$HEAD_SHA" -- '**/*.tf' '**/*.tfvars' | sed 's#^./##')

          if [ ${#files[@]} -eq 0 ]; then
            echo "No Terraform changes detected."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo 'matrix={"folder":[]}' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Get unique directories containing changed files
          dirs=$(printf '%s\n' "${files[@]}" | xargs -n1 dirname | sort -u)

          # Convert to JSON array using jq
          json_arr=$(printf '%s\n' "$dirs" | jq -R -s 'split("\n")[:-1]')

          # Build final matrix object: {"folder": ["dir1","dir2", ...]}
          matrix=$(jq -n --argjson arr "$json_arr" '{folder: $arr}')

          echo "Changed folders:"
          echo "$matrix"

          echo "has_changes=true" >> "$GITHUB_OUTPUT"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  # terraform-scan:
  #   name: Scan â–º ${{ matrix.subdomain }} Subdomain
  #   runs-on: ubuntu-latest
  #   needs: generate-matrix
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       dir: ${{ fromJson(needs.generate-matrix.outputs.dirs) }}
  #   steps:
  #     - name: Checkout-Code
  #       uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.ref_name }}

  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.12.2"

  #     - name: Terraform fmt (check)
  #       run: terraform fmt -check -recursive
  #       working-directory: ${{ matrix.path }}

  #     # Use -backend=false to avoid touching remote backends/creds in CI lint stage
  #     - name: Terraform init (no backend)
  #       run: terraform init -backend=false
  #       working-directory: ${{ matrix.path }}

  #     - name: Terraform validate
  #       run: terraform validate -no-color
  #       working-directory: ${{ matrix.path }}

  #     # ---------- TFLint ----------
  #     - name: Set up TFLint
  #       uses: terraform-linters/setup-tflint@v4

  #     - name: TFLint init (plugins)
  #       run: tflint --init
  #       working-directory: ${{ matrix.path }}

  #     - name: Run TFLint
  #       run: tflint --recursive
  #       working-directory: ${{ matrix.path }}
  #       # Add --format=compact for shorter output, or --config=.tflint.hcl if needed

  #     # ---------- tfsec ----------
  #     # Runs tfsec in Docker so you don't need to install it on the runner
  #     - name: Run tfsec (generate SARIF)
  #       working-directory: ${{ matrix.path }}
  #       run: |
  #         docker run --rm -v "$PWD":/src aquasec/tfsec:latest \
  #           /src --no-module-download --soft-fail=false \
  #           --format sarif --out tfsec.sarif

  #     # Optional: upload SARIF so findings show up in GitHub "Code scanning alerts"
  #     - name: Upload tfsec results to GitHub Code Scanning
  #       if: always()  # still upload even if previous steps failed
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: ${{ github.workspace }}/tfsec.sarif